<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zwt</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhwentao.github.io/"/>
  <updated>2017-01-22T15:45:15.000Z</updated>
  <id>https://zhwentao.github.io/</id>
  
  <author>
    <name>zwt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx http 502 503 504区别</title>
    <link href="https://zhwentao.github.io/2017/01/22/nginx-http-502-503-504%E5%8C%BA%E5%88%AB/"/>
    <id>https://zhwentao.github.io/2017/01/22/nginx-http-502-503-504区别/</id>
    <published>2017-01-22T15:43:32.000Z</published>
    <updated>2017-01-22T15:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>做web开发，常常回遇到5XX的状态码，区别记录下来：</p>
<ul>
<li>504：Gateway Timeout 网关超时，如php-fpm运行超时</li>
<li>502：Bad Gateway 网关错误，如无空闲的php-fpm进程</li>
<li>503：Service  Unavailable 服务不可用，如当前并发请求数达到nginx limit_conn上线</li>
</ul>
<p>504表示网关可用，但是处理超时<br>502表示没有可用的网关<br>503表示nginx不可提供服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做web开发，常常回遇到5XX的状态码，区别记录下来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;504：Gateway Timeout 网关超时，如php-fpm运行超时&lt;/li&gt;
&lt;li&gt;502：Bad Gateway 网关错误，如无空闲的php-fpm进程&lt;/li&gt;
&lt;li&gt;503：
    
    </summary>
    
    
      <category term="nginx" scheme="https://zhwentao.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>猴年总结</title>
    <link href="https://zhwentao.github.io/2017/01/21/%E7%8C%B4%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://zhwentao.github.io/2017/01/21/猴年总结/</id>
    <published>2017-01-21T14:50:36.000Z</published>
    <updated>2017-01-22T15:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>转眼到猴尾巴了，总结一下今年的工作生活，为来年做个参照。</p>
<p>工作上，从老东家毕业，换了新的环境，有更多的时间折腾些自己感兴趣的事，还不错。</p>
<p>技能上，买的书看了大半吧，温习了java相关的东西，hadoop相关的一些东西。go，swift这些热门的语言也可以上手些程序了。收获还是有的。</p>
<p>生活嘛，还是老样子，顺心的事多，烦心的事少。</p>
<p>接下来的事情，就是计划一下来年，</p>
<p>技能上，还是要保持持续学习的劲头，把go，swift继续深入，争取能够做个好用的app和一套go的服务端业务。大数据方面，希望能够更深入的了解hadoop，storm，spark这些大数据处理方面的技能。kafka，zookeeper这些分布式系统的常用组件也能有个大致的了解。数数还是挺多的。希望自己能够坚持。</p>
<p>生活上，争取能够保持，放平心态，顺其自然。</p>
<hr>
<p>从今年开始要注意做记录总结。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼到猴尾巴了，总结一下今年的工作生活，为来年做个参照。&lt;/p&gt;
&lt;p&gt;工作上，从老东家毕业，换了新的环境，有更多的时间折腾些自己感兴趣的事，还不错。&lt;/p&gt;
&lt;p&gt;技能上，买的书看了大半吧，温习了java相关的东西，hadoop相关的一些东西。go，swift这些热门的语
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php扩展知识点总结</title>
    <link href="https://zhwentao.github.io/2017/01/17/php%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://zhwentao.github.io/2017/01/17/php扩展知识点总结/</id>
    <published>2017-01-17T14:43:28.000Z</published>
    <updated>2017-02-08T14:31:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发PHP扩展基本的知识点总结：</p>
<p>#编写PHP扩展用到的工具：<br>ext_skel 根据proto／xml等描述文件生成扩展代码框架</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="comment">#ext_skel --proto=file --extname=xyz</span></div></pre></td></tr></table></figure>
<p>phpize 生成php扩展congifure</p>
<p>#获取参数</p>
<p>参数类型对应表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">类型指定符   | 对应的C类型    |   描述</div><div class="line">------------ | -------------- | ----------------</div><div class="line">   l         |  long          |符号整数</div><div class="line">   d         |  double        |浮点数</div><div class="line">   s         |  char \*, int  | 二进制字符串，长度</div><div class="line">   b         |  zend_bool     |逻辑型（1或0）</div><div class="line">   r         |  zval *        |资源（文件指针，数据库连接等）</div><div class="line">   a         |  zval *        |联合数组</div><div class="line">   o         |  zval *        |任何类型的对象</div><div class="line">   O         |  zval *        |指定类型的对象。需要提供目标对象的类类型</div><div class="line">   z         |  zval *        |无任何操作的zval</div></pre></td></tr></table></figure></p>
<p>#内存分配<br>堆内存分配和标准c类似，只不过e***alloc()<br>函数如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">emalloc(<span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">efree(<span class="keyword">void</span> *ptr);</div><div class="line"> </div><div class="line">ecalloc(<span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">erealloc(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">estrdup(<span class="keyword">const</span> <span class="keyword">char</span> *s);</div><div class="line"> </div><div class="line">estrndup(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">int</span> length);</div></pre></td></tr></table></figure>
<p>#返回值<br>变量：return_value<br>宏：RETURN_type(), RETVAL_type()</p>
<p>宏函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置返回值并且结束函数	|设置返回值		|宏返回类型和参数</div><div class="line">------------------------|-----------------------|----------------</div><div class="line">RETURN_LONG(l)        	|RETVAL_LONG(l)		|整数</div><div class="line">RETURN_BOOL(b)		|RETVAL_BOOL(b)		|布尔数(1或0)</div><div class="line">RETURN_NULL()	RETVAL_NULL()	|NULL			|</div><div class="line">RETURN_DOUBLE(d)		|RETVAL_DOUBLE(d)	|浮点数</div><div class="line">RETURN_STRING(s, dup)		|RETVAL_STRING(s, dup)	|字符串。如果dup为1，引擎会调用estrdup()重复s，使用拷贝。如果dup为0，就使用s</div><div class="line">RETURN_STRINGL(s, l, dup)	|RETVAL_STRINGL(s, l, dup)|	长度为l的字符串值。与上一个宏一样，但因为s的长度被指定，所以速度更快。</div><div class="line">RETURN_TRUE			|RETVAL_TRUE		|返回布尔值true。注意到这个宏没有括号。</div><div class="line">RETURN_FALSE			|RETVAL_FALSE		|返回布尔值false。注意到这个宏没有括号。</div><div class="line">RETURN_RESOURCE(r)		|RETVAL_RESOURCE(r)	|资源句柄。</div></pre></td></tr></table></figure></p>
<p>#创建PHP变量结构体</p>
<p>#引用三方库</p>
<p>参考：</p>
<ol>
<li><a href="http://www.laruence.com/2009/04/28/719.html" target="_blank" rel="external">用C/C++扩展你的PHP </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发PHP扩展基本的知识点总结：&lt;/p&gt;
&lt;p&gt;#编写PHP扩展用到的工具：&lt;br&gt;ext_skel 根据proto／xml等描述文件生成扩展代码框架&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
    
    </summary>
    
    
      <category term="PHP" scheme="https://zhwentao.github.io/tags/PHP/"/>
    
      <category term="c" scheme="https://zhwentao.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>php并发实践</title>
    <link href="https://zhwentao.github.io/2017/01/16/php%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zhwentao.github.io/2017/01/16/php并发实践/</id>
    <published>2017-01-16T14:29:49.000Z</published>
    <updated>2017-01-16T14:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h1><p>PHP做接口业务，经常会遇到请求多个后端服务。如果是步阻塞请求，php接口的响应时间依赖于所有后台服务的响应时间之和。那么有什么方法可以优化服务调用，提高php接口响应时间呢？</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h4 id="curl-multi并发请求http服务"><a href="#curl-multi并发请求http服务" class="headerlink" title="curl_multi并发请求http服务"></a>curl_multi并发请求http服务</h4><h4 id="php多进程"><a href="#php多进程" class="headerlink" title="php多进程"></a>php多进程</h4><h4 id="php协程"><a href="#php协程" class="headerlink" title="php协程"></a>php协程</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题场景&quot;&gt;&lt;a href=&quot;#问题场景&quot; class=&quot;headerlink&quot; title=&quot;问题场景&quot;&gt;&lt;/a&gt;问题场景&lt;/h1&gt;&lt;p&gt;PHP做接口业务，经常会遇到请求多个后端服务。如果是步阻塞请求，php接口的响应时间依赖于所有后台服务的响应时间之和。那么有
    
    </summary>
    
    
      <category term="PHP" scheme="https://zhwentao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置注意事项</title>
    <link href="https://zhwentao.github.io/2017/01/16/ssh%E9%85%8D%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://zhwentao.github.io/2017/01/16/ssh配置注意事项/</id>
    <published>2017-01-16T14:28:43.000Z</published>
    <updated>2017-01-16T14:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ssh连接常见问题："><a href="#ssh连接常见问题：" class="headerlink" title="ssh连接常见问题："></a>ssh连接常见问题：</h4><ul>
<li>秘钥路径配置不对</li>
<li>服务端authorized_keys权限不对（正确600）<br>调试：<br>客户端：ssh -vvv<br>服务端：sshd -d</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ssh连接常见问题：&quot;&gt;&lt;a href=&quot;#ssh连接常见问题：&quot; class=&quot;headerlink&quot; title=&quot;ssh连接常见问题：&quot;&gt;&lt;/a&gt;ssh连接常见问题：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;秘钥路径配置不对&lt;/li&gt;
&lt;li&gt;服务端authorized_
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zwt</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhwentao.github.io/"/>
  <updated>2017-02-26T16:34:52.000Z</updated>
  <id>https://zhwentao.github.io/</id>
  
  <author>
    <name>zwt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php扩展-调试工具</title>
    <link href="https://zhwentao.github.io/2017/02/27/php%E6%89%A9%E5%B1%95-%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://zhwentao.github.io/2017/02/27/php扩展-调试工具/</id>
    <published>2017-02-26T16:24:21.000Z</published>
    <updated>2017-02-26T16:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在linux 环境下开发php扩展，需要用到linux下的调试工具，如gdb，strace，valgrind等。另外，一些情况下，在php产生core是，需要调试core文件。下面记录一下常用工具的用途和一些帮助资源。</p>
<h1 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h1><p>为了gdb可以显示更多调试信息，需要在开启php编译选项–enable-debug。具体的调试技巧可参考<a href="http://blog.jobbole.com/107759/" target="_blank" rel="external">gdb调试入门-中文</a> <a href="http://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html" target="_blank" rel="external">英文</a></p>
<h1 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h1><p>php执行过程中返回的错误信息，有时候并不能明确指出具体哪里除了问题。这就需要使用strace这样的工具来跟踪具体那个函数执行报错。一般使用strace -p=pid来跟踪具体的某个进程，对于fpm等模式下，设置配置文件只启动一个worker进程，方便跟踪。</p>
<h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><p>是一套调试工具集合，用来检测包括内存泄露，多线程竞争等问题的工具。valgrind –leak-check=yes /path/to/php tests/001.php，使用memcheck来检测php是否存在内存泄露。具体可参考 <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-valgrind/" target="_blank" rel="external">应用 Valgrind 发现 Linux 程序的内存问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux 环境下开发php扩展，需要用到linux下的调试工具，如gdb，strace，valgrind等。另外，一些情况下，在php产生core是，需要调试core文件。下面记录一下常用工具的用途和一些帮助资源。&lt;/p&gt;
&lt;h1 id=&quot;gdb&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="PHP扩展" scheme="https://zhwentao.github.io/tags/PHP%E6%89%A9%E5%B1%95/"/>
    
      <category term="c" scheme="https://zhwentao.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>关于技术答辩分享记录</title>
    <link href="https://zhwentao.github.io/2017/02/11/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E7%AD%94%E8%BE%A9%E5%88%86%E4%BA%AB%E8%AE%B0%E5%BD%95/"/>
    <id>https://zhwentao.github.io/2017/02/11/关于技术答辩分享记录/</id>
    <published>2017-02-10T16:02:03.000Z</published>
    <updated>2017-02-10T16:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然没有报名晋升答辩，当然也没有被通知报名答辩，但是还是记录一下别人家的经验吧。<br>总结一下几个关键词：技术驱动，成果量化，功在平时，注重气场。</p>
<p>技术晋升答辩当然必须是技术驱动，突出技术上的亮点。可以对业务抽象后产出通用组件，优化开发流程提高工作效率的工具或者系统，新技术结合业务特点的消化应用，等等方面。</p>
<p>工作成果能够量化，给出前后的对比，使用效果的有力证据，而不是模凌两个的叙述。如：性能优化要给出前后性能图标，具体qps的对比；新技术应用要能说明白为啥用，好在哪里。</p>
<p>平时工作多总结，抽象，记录。</p>
<p>表达展示方面，充分准备，自如表达，不争不抢，不卑不亢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然没有报名晋升答辩，当然也没有被通知报名答辩，但是还是记录一下别人家的经验吧。&lt;br&gt;总结一下几个关键词：技术驱动，成果量化，功在平时，注重气场。&lt;/p&gt;
&lt;p&gt;技术晋升答辩当然必须是技术驱动，突出技术上的亮点。可以对业务抽象后产出通用组件，优化开发流程提高工作效率的工具
    
    </summary>
    
    
      <category term="软实力" scheme="https://zhwentao.github.io/tags/%E8%BD%AF%E5%AE%9E%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>nginx http 502 503 504区别</title>
    <link href="https://zhwentao.github.io/2017/01/22/nginx-http-502-503-504%E5%8C%BA%E5%88%AB/"/>
    <id>https://zhwentao.github.io/2017/01/22/nginx-http-502-503-504区别/</id>
    <published>2017-01-22T15:43:32.000Z</published>
    <updated>2017-02-28T14:59:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>做web开发，常常回遇到5XX的状态码，区别记录下来：</p>
<ul>
<li>504：Gateway Timeout 网关超时，如php-fpm运行超时</li>
<li>502：Bad Gateway 网关错误，如无空闲的php-fpm进程</li>
<li>503：Service  Unavailable 服务不可用，如当前并发请求数达到nginx limit_conn上线</li>
</ul>
<p>504表示网关可用，但是处理超时<br>502表示没有可用的网关<br>503表示nginx不可提供服务</p>
<p>那么，在错误排查的时候，可以根据日志里状态码来诊断那个环节出现了问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做web开发，常常回遇到5XX的状态码，区别记录下来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;504：Gateway Timeout 网关超时，如php-fpm运行超时&lt;/li&gt;
&lt;li&gt;502：Bad Gateway 网关错误，如无空闲的php-fpm进程&lt;/li&gt;
&lt;li&gt;503：
    
    </summary>
    
    
      <category term="nginx" scheme="https://zhwentao.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>猴年总结</title>
    <link href="https://zhwentao.github.io/2017/01/21/%E7%8C%B4%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://zhwentao.github.io/2017/01/21/猴年总结/</id>
    <published>2017-01-21T14:50:36.000Z</published>
    <updated>2017-01-22T15:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>转眼到猴尾巴了，总结一下今年的工作生活，为来年做个参照。</p>
<p>工作上，从老东家毕业，换了新的环境，有更多的时间折腾些自己感兴趣的事，还不错。</p>
<p>技能上，买的书看了大半吧，温习了java相关的东西，hadoop相关的一些东西。go，swift这些热门的语言也可以上手些程序了。收获还是有的。</p>
<p>生活嘛，还是老样子，顺心的事多，烦心的事少。</p>
<p>接下来的事情，就是计划一下来年，</p>
<p>技能上，还是要保持持续学习的劲头，把go，swift继续深入，争取能够做个好用的app和一套go的服务端业务。大数据方面，希望能够更深入的了解hadoop，storm，spark这些大数据处理方面的技能。kafka，zookeeper这些分布式系统的常用组件也能有个大致的了解。数数还是挺多的。希望自己能够坚持。</p>
<p>生活上，争取能够保持，放平心态，顺其自然。</p>
<hr>
<p>从今年开始要注意做记录总结。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼到猴尾巴了，总结一下今年的工作生活，为来年做个参照。&lt;/p&gt;
&lt;p&gt;工作上，从老东家毕业，换了新的环境，有更多的时间折腾些自己感兴趣的事，还不错。&lt;/p&gt;
&lt;p&gt;技能上，买的书看了大半吧，温习了java相关的东西，hadoop相关的一些东西。go，swift这些热门的语
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php扩展知识点总结</title>
    <link href="https://zhwentao.github.io/2017/01/17/php%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://zhwentao.github.io/2017/01/17/php扩展知识点总结/</id>
    <published>2017-01-17T14:43:28.000Z</published>
    <updated>2017-02-10T18:42:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发PHP扩展基本的知识点总结：</p>
<h1 id="编写PHP扩展用到的工具："><a href="#编写PHP扩展用到的工具：" class="headerlink" title="编写PHP扩展用到的工具："></a>编写PHP扩展用到的工具：</h1><p>ext_skel 根据proto／xml等描述文件生成扩展代码框架</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#ext_skel --proto=file --extname=xyz</span></div></pre></td></tr></table></figure>
<p>phpize 生成php扩展congifure</p>
<h1 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h1><p>参数类型对应表</p>
<table>
<thead>
<tr>
<th>类型指定符</th>
<th>对应的C类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>   l</td>
<td>long</td>
<td>符号整数</td>
</tr>
<tr>
<td>   d</td>
<td>double</td>
<td>浮点数</td>
</tr>
<tr>
<td>   s</td>
<td>char *, int</td>
<td>二进制字符串，长度</td>
</tr>
<tr>
<td>   b</td>
<td>zend_bool</td>
<td>逻辑型（1或0）</td>
</tr>
<tr>
<td>   r</td>
<td>zval *</td>
<td>资源（文件指针，数据库连接等）</td>
</tr>
<tr>
<td>   a</td>
<td>zval *</td>
<td>联合数组</td>
</tr>
<tr>
<td>   o</td>
<td>zval *</td>
<td>任何类型的对象</td>
</tr>
<tr>
<td>   O</td>
<td>zval *</td>
<td>指定类型的对象。需要提供目标对象的类类型</td>
</tr>
<tr>
<td>   z</td>
<td>zval *</td>
<td>无任何操作的zval</td>
</tr>
</tbody>
</table>
<h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><p>堆内存分配和标准c类似，只不过e***alloc()<br>函数如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">emalloc(<span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">efree(<span class="keyword">void</span> *ptr);</div><div class="line"> </div><div class="line">ecalloc(<span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">erealloc(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size);</div><div class="line"> </div><div class="line">estrdup(<span class="keyword">const</span> <span class="keyword">char</span> *s);</div><div class="line"> </div><div class="line">estrndup(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">int</span> length);</div></pre></td></tr></table></figure>
<h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p>变量：return_value<br>宏：RETURN_type(), RETVAL_type()</p>
<p>宏函数：</p>
<table>
<thead>
<tr>
<th>设置返回值并且结束函数</th>
<th>设置返回值</th>
<th>宏返回类型和参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>RETURN_LONG(l)</td>
<td>RETVAL_LONG(l)</td>
<td>整数</td>
</tr>
<tr>
<td>RETURN_BOOL(b)</td>
<td>RETVAL_BOOL(b)</td>
<td>布尔数(1或0)</td>
</tr>
<tr>
<td>RETURN_NULL()    RETVAL_NULL()</td>
<td>NULL</td>
<td></td>
</tr>
<tr>
<td>RETURN_DOUBLE(d)</td>
<td>RETVAL_DOUBLE(d)</td>
<td>浮点数</td>
</tr>
<tr>
<td>RETURN_STRING(s, dup)</td>
<td>RETVAL_STRING(s, dup)</td>
<td>字符串。如果dup为1，引擎会调用estrdup()重复s，使用拷贝。如果dup为0，就使用s</td>
</tr>
<tr>
<td>RETURN_STRINGL(s, l, dup)</td>
<td>RETVAL_STRINGL(s, l, dup)</td>
<td>长度为l的字符串值。与上一个宏一样，但因为s的长度被指定，所以速度更快。</td>
</tr>
<tr>
<td>RETURN_TRUE</td>
<td>RETVAL_TRUE</td>
<td>返回布尔值true。注意到这个宏没有括号。</td>
</tr>
<tr>
<td>RETURN_FALSE</td>
<td>RETVAL_FALSE</td>
<td>返回布尔值false。注意到这个宏没有括号。</td>
</tr>
<tr>
<td>RETURN_RESOURCE(r)</td>
<td>RETVAL_RESOURCE(r)</td>
<td>资源句柄。</td>
</tr>
</tbody>
</table>
<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><p>PHP可以运行在线程安全和非线程安全的模式下，故此PHP提供一种机制保证两种模式下都可以正确的使用’全局变量’，相关的宏如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ZEND_BEGIN_MODULE_GLOBALS(extname)</div><div class="line"> </div><div class="line"><span class="keyword">int</span> global_value;</div><div class="line"><span class="keyword">char</span> *global_string;</div><div class="line"> </div><div class="line">ZEND_END_MODULE_GLOBALS(extname)</div></pre></td></tr></table></figure></p>
<p>ext_skel生成的框架代码去掉上面代码的注释，可以在begin和end之间添加其他全局变量<br>使用全局变量前要先初始化。</p>
<h1 id="ini配置项"><a href="#ini配置项" class="headerlink" title="ini配置项"></a>ini配置项</h1><p>ini文件格式如：extname.global_value=40，如果未定义，则可以使用如下方式设置默认值。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PHP_INI_BEGIN()</div><div class="line"> </div><div class="line">STD_PHP_INI_ENTRY(<span class="string">"extname.global_value"</span>, <span class="string">"42"</span>, PHP_INI_ALL, OnUpdateInt, global_value, zend_extname_globals, extname_globals)</div><div class="line"> </div><div class="line">STD_PHP_INI_ENTRY(<span class="string">"extname.global_string"</span>, <span class="string">"foobar"</span>, PHP_INI_ALL, OnUpdateString, global_string, zend_extname_globals, extname_globals)</div><div class="line"> </div><div class="line">PHP_INI_END()</div></pre></td></tr></table></figure>
<p>你需要分别去掉PHP_MINIT_FUNCTION(extname)中的REGISTER_INI_ENTRIES()调用和PHP_MSHUTDOWN_FUNCTION(extname)中的UNREGISTER_INI_ENTRIES()的注释。<br>可以使用全局变量宏访问ini配置项</p>
<p>STD_PHP_INI_ENTRY宏的参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>INI条目名</td>
</tr>
<tr>
<td>default_value</td>
<td>如果没有在INI文件中指定，条目的默认值。默认值始终是一个字符串。</td>
</tr>
<tr>
<td>modifiable</td>
<td>设定在何种环境下INI条目可以被更改的位域。可以的值是：</td>
</tr>
<tr>
<td></td>
<td>PHP_INI_SYSTEM. 能够在php.ini或http.conf等系统文件更改</td>
</tr>
<tr>
<td></td>
<td>PHP_INI_PERDIR. 能够在 .htaccess中更改</td>
</tr>
<tr>
<td></td>
<td>PHP_INI_USER. 能够被用户脚本更改</td>
</tr>
<tr>
<td></td>
<td>PHP_INI_ALL. 能够在所有地方更改</td>
</tr>
<tr>
<td>on_modify</td>
<td>处理INI条目更改的回调函数。你不需自己编写处理程序，使用下面提供的函数。包括：</td>
</tr>
<tr>
<td></td>
<td>OnUpdateInt</td>
</tr>
<tr>
<td></td>
<td>OnUpdateString</td>
</tr>
<tr>
<td></td>
<td>OnUpdateBool</td>
</tr>
<tr>
<td></td>
<td>OnUpdateStringUnempty</td>
</tr>
<tr>
<td></td>
<td>OnUpdateReal</td>
</tr>
<tr>
<td>property_name</td>
<td>应当被更新的变量名</td>
</tr>
<tr>
<td>struct_type</td>
<td>变量驻留的结构类型。因为通常使用全局变量机制，所以这个类型自动被定义，类似于zend_extname_globals。</td>
</tr>
<tr>
<td>struct_ptr</td>
<td>全局结构名。如果使用全局变量机制，该名为extname_globals。</td>
</tr>
</tbody>
</table>
<p>参考：</p>
<ol>
<li><a href="http://www.laruence.com/2009/04/28/719.html" target="_blank" rel="external">用C/C++扩展你的PHP </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发PHP扩展基本的知识点总结：&lt;/p&gt;
&lt;h1 id=&quot;编写PHP扩展用到的工具：&quot;&gt;&lt;a href=&quot;#编写PHP扩展用到的工具：&quot; class=&quot;headerlink&quot; title=&quot;编写PHP扩展用到的工具：&quot;&gt;&lt;/a&gt;编写PHP扩展用到的工具：&lt;/h1&gt;&lt;p&gt;ex
    
    </summary>
    
    
      <category term="PHP扩展" scheme="https://zhwentao.github.io/tags/PHP%E6%89%A9%E5%B1%95/"/>
    
      <category term="PHP" scheme="https://zhwentao.github.io/tags/PHP/"/>
    
      <category term="c" scheme="https://zhwentao.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>php并发实践</title>
    <link href="https://zhwentao.github.io/2017/01/16/php%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zhwentao.github.io/2017/01/16/php并发实践/</id>
    <published>2017-01-16T14:29:49.000Z</published>
    <updated>2017-01-16T14:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h1><p>PHP做接口业务，经常会遇到请求多个后端服务。如果是步阻塞请求，php接口的响应时间依赖于所有后台服务的响应时间之和。那么有什么方法可以优化服务调用，提高php接口响应时间呢？</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h4 id="curl-multi并发请求http服务"><a href="#curl-multi并发请求http服务" class="headerlink" title="curl_multi并发请求http服务"></a>curl_multi并发请求http服务</h4><h4 id="php多进程"><a href="#php多进程" class="headerlink" title="php多进程"></a>php多进程</h4><h4 id="php协程"><a href="#php协程" class="headerlink" title="php协程"></a>php协程</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题场景&quot;&gt;&lt;a href=&quot;#问题场景&quot; class=&quot;headerlink&quot; title=&quot;问题场景&quot;&gt;&lt;/a&gt;问题场景&lt;/h1&gt;&lt;p&gt;PHP做接口业务，经常会遇到请求多个后端服务。如果是步阻塞请求，php接口的响应时间依赖于所有后台服务的响应时间之和。那么有
    
    </summary>
    
    
      <category term="PHP" scheme="https://zhwentao.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置注意事项</title>
    <link href="https://zhwentao.github.io/2017/01/16/ssh%E9%85%8D%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://zhwentao.github.io/2017/01/16/ssh配置注意事项/</id>
    <published>2017-01-16T14:28:43.000Z</published>
    <updated>2017-01-16T14:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ssh连接常见问题："><a href="#ssh连接常见问题：" class="headerlink" title="ssh连接常见问题："></a>ssh连接常见问题：</h4><ul>
<li>秘钥路径配置不对</li>
<li>服务端authorized_keys权限不对（正确600）<br>调试：<br>客户端：ssh -vvv<br>服务端：sshd -d</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ssh连接常见问题：&quot;&gt;&lt;a href=&quot;#ssh连接常见问题：&quot; class=&quot;headerlink&quot; title=&quot;ssh连接常见问题：&quot;&gt;&lt;/a&gt;ssh连接常见问题：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;秘钥路径配置不对&lt;/li&gt;
&lt;li&gt;服务端authorized_
    
    </summary>
    
    
  </entry>
  
</feed>
